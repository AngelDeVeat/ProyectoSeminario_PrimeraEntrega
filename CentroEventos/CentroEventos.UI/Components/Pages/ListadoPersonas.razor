@using CentroEventos.UI.Components
@page "/listadoPersonas"
@*@rendermode InteractiveServer*@

@inject PersonaListadoUseCase PersonaListadoUseCase
@inject PersonaBajaUseCase PersonaBajaUseCase
@inject PersonaModificacionUseCase PersonaModificacionUseCase
@inject NavigationManager Navegador
@inject ServicioAutorizacion ServicioAutorizacion
@inject UserState User
@*SI el usuario llego hasta aqui sin pasar por inicio_sesion/registro*@
@if (mostrarDialogo){
<Mensaje @ref=dialogo 
mensaje="Acceso no autorizado" 
soloMensaje=true
OnCerrado="VolverHome"/>}
@if(!mostrarDialogo){
    <DialogoEx  @ref="dialogoex"/>
<DialogosDeConfirmacion @ref="dialogocon" OnConfirmado="Eliminar"/>
    <table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>DNI</th>
        <th>NOMBRE</th>
        <th>APELLIDO</th>
        <th>EMAIL</th>
        <th>TELEFONO</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var per in _lista)
    {
    <tr>
        <td>@per.ID</td>
        <td>@per.DNI</td>
        <td>@per.Nombre</td>
        <td>@per.Apellido</td>
        <td>@per.Email</td>
        <td>@per.Telefono</td>
        <td>
           @if (Editar){
            <button class="btn btn-primary" @onclick="()=>Modificacion(per)">
                Editar
            </button>}
        </td>
        <td>
            @if (Elimina){
            <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(per)">
                Eliminar
            </button>}
        </td>
    </tr>
    }
     <button class="btn btn-danger" @onclick="()=>VolverInicio()">
            Volver al inicio
        </button>
    </tbody>
    </table>
}
@code {
List<Persona> _lista = new List<Persona>();
bool Editar;
bool Elimina;
DialogosDeConfirmacion? dialogocon;
Persona? _persona = null;
Usuario? user;
DialogoEx? dialogoex;
Mensaje? dialogo=null;
bool mostrarDialogo=false;
protected override void OnInitialized()
{
    user=User.user;
  if (user ==null){
    mostrarDialogo=true;
  }
  else{
    _lista = PersonaListadoUseCase.Listado();
    Editar= ServicioAutorizacion.PoseeElPermiso(user.Permisos,Permiso.PersonaModificacion);
   Elimina= ServicioAutorizacion.PoseeElPermiso(user.Permisos,Permiso.PersonaBaja);
    }
}
private void ConfirmarEliminacion(Persona per)
{
_persona = per;
dialogocon?.Mostrar($"Â¿Desea eliminar a la Persona {per.Nombre} {per.Apellido} {per.ID} {per.DNI}?");
}
private void VolverInicio(){
     Navegador.NavigateTo($"/inicio");
}
private void VolverHome(){
     Navegador.NavigateTo($"/");
}
private void Modificacion(Persona per){
    Navegador.NavigateTo($"/Persona/{per.ID}");
}
private void Eliminar()
{
if (_persona !=null)
{
    try{
        if(user!=null){
        PersonaBajaUseCase.Baja(_persona.ID, user);
        _lista = PersonaListadoUseCase.Listado(); }
}
catch(Exception e){
    dialogoex?.Mostrar(e.Message);
}
}
}
 protected override Task OnAfterRenderAsync(bool firstRender){
        if (mostrarDialogo && dialogo != null && firstRender){
            dialogo.Mostrar();
            StateHasChanged();
        }
        return Task.CompletedTask;
    } 
}