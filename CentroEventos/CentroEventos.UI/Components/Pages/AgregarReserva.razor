@using CentroEventos.UI.Components
@page "/Reserva/{id:int?}"
@rendermode InteractiveServer
@inject NavigationManager Navegador;
using System.Linq.Expressions;

@inject ReservaAltaUseCase ReservaAltaUseCase
@inject ReservaModificacionUseCase ReservaModificacionUseCase
@inject ObtenerReservaUseCase ObtenerReservaUseCase
@inject ReservaModificacionUseCase ReservaModificacionUseCase
@inject UserState User
@*SI el usuario llego hasta aqui sin pasar por inicio_sesion/registro*@
<Mensaje @ref=dialogo 
mensaje="Acceso no autorizado" 
soloMensaje=true
OnCerrado="VolverHome"/>
<DialogoEx  @ref="dialogoex" />

@if (_esnuevareserva)
 {
<h3>Agregando una nueva reserva</h3>
 }
 else
{
<h3> Modificando a la Reserva "@_reserva.ID"</h3>
 }
<input placeholder="ID DueÃ±o de la Reserva" @bind="_reserva.PersonaID" class="form-control">
<input placeholder="ID Evento a Reservar" @bind="_reserva.EventoDeportivoID" class="form-control">
<button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
<button class="btn btn-danger" @onclick="()=>VolverInicio()">
            Volver al inicio
        </button>
@code {
Reserva _reserva = new Reserva();
[Parameter] public int? id{get;set;}
Mensaje? dialogo=null;
 DialogoEx? dialogoex;
 Usuario? user{get;set;}=null;
 bool mostrarDialogo=false;
bool _esnuevareserva=true;
protected override void OnInitialized(){
  user=User.user;
  if (user ==null){
    mostrarDialogo=true;
  }
}
protected override void OnParametersSet()
{
if (id != null)
{
   var reserva = ObtenerReservaUseCase.Ejecutar(id.Value);
  if (reserva != null){
        _esnuevareserva=false;
        _reserva=reserva;}
}
}
private void VolverInicio(){
     Navegador.NavigateTo($"inicio");
     }
     private void VolverHome(){
     Navegador.NavigateTo($"");
}
void Aceptar()
{
    try{
if (user!=null && _reserva !=null){
    if (_esnuevareserva)
      ReservaAltaUseCase.Ejecutar(_reserva, user);
   else
     ReservaModificacionUseCase.Ejecutar(_reserva,user);
   }
_reserva = new Reserva();
Navegador.NavigateTo("listadoReservas");}
catch(Exception e){
    dialogoex?.Mostrar(e.Message);
}
}
 protected override Task OnAfterRenderAsync(bool firstRender){
        if (mostrarDialogo && dialogo != null && firstRender){
            dialogo.Mostrar();
            mostrarDialogo = false;
            StateHasChanged();
        }
        return Task.CompletedTask;
    } 
}