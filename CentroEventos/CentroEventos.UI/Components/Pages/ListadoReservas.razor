@using CentroEventos.UI.Components
@page "/listadoReservas"
@*@rendermode InteractiveServer*@

@inject ReservaListadoUseCase ReservaListadoUseCase
@inject ReservaBajaUseCase ReservaBajaUseCase
@inject ReservaModificacionUseCase ReservaModificacionUseCase
@inject NavigationManager Navegador
@inject ServicioAutorizacion ServicioAutorizacion
@inject UserState UserState
@*SI el usuario llego hasta aqui sin pasar por inicio_sesion/registro*@
@if(mostrarDialogo){
<Mensaje @ref=dialogo 
mensaje="Acceso no autorizado" 
soloMensaje=true
OnCerrado="VolverHome"/>
}
else{
<DialogoEx  @ref="dialogoex"/>
<DialogosDeConfirmacion @ref="dialogocon" OnConfirmado="Eliminar"/>
    <table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>ID EVENTO</th>
        <th>ASISTENCIA</th>
        <th>FECHA DE ALTA</th>
        <th>DUEÑO</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var reserva in _lista)
    {
    <tr>
        <td>@reserva.ID</td>
        <td>@reserva.EventoDeportivoID</td>
        <td>@reserva.EstadoAsistencia</td>
        <td>@reserva.FechaAltaReserva</td>
        <td>@reserva.PersonaID</td>
        <td>
            @if (Editar){
            <button class="btn btn-primary" @onclick="()=>Modificacion(reserva)">
                Editar
            </button>}
        </td>
        <td>
            @if (Elimina){
            <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(reserva)">
                Eliminar
            </button>}
        </td>
    </tr>
    }
        <button class="btn btn-danger" @onclick="()=>VolverInicio()">
            Volver al inicio
        </button>
    </tbody>
    </table>
}
@code {
List<Reserva> _lista = new List<Reserva>();
Usuario? user;
 DialogoEx? dialogoex;
 bool Editar;
 bool Elimina;
 Mensaje? dialogo=null;
 bool mostrarDialogo=false;
protected override void OnInitialized()
{user=UserState.user;
  if (user ==null){
    mostrarDialogo=true;
  }
else{
    _lista = ReservaListadoUseCase.Ejecutar();
    Editar=ServicioAutorizacion.PoseeElPermiso(user.Permisos,Permiso.ReservaModificacion);
    Elimina=ServicioAutorizacion.PoseeElPermiso(user.Permisos,Permiso.ReservaBaja);
    }
}
DialogosDeConfirmacion? dialogocon;
Reserva? _reserva = null;
private void VolverInicio(){
     Navegador.NavigateTo($"/inicio");
}
private void VolverHome(){
     Navegador.NavigateTo($"/");
}
private void ConfirmarEliminacion(Reserva reserva)
{
_reserva = reserva;
dialogocon?.Mostrar($"¿Desea eliminar a la reserva {reserva.ID} {reserva.EstadoAsistencia} {reserva.FechaAltaReserva} {reserva.PersonaID}?");
}
private void Modificacion(Reserva reserva){
    Navegador.NavigateTo($"/Reserva/{reserva.ID}");
}
private void Eliminar()
{
if (_reserva != null  )
{try{
    if (user!=null){
ReservaBajaUseCase.Ejecutar(_reserva.ID, user);
_lista = ReservaListadoUseCase.Ejecutar(); }
} catch(Exception e){
    dialogoex?.Mostrar(e.Message);
}}
}
 protected override Task OnAfterRenderAsync(bool firstRender){
        if (mostrarDialogo && dialogo != null && firstRender){
            dialogo.Mostrar();
            StateHasChanged();
        }
        return Task.CompletedTask;
    } 
}    
