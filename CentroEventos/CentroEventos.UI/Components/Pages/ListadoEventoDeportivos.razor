
@page "/listadoEventosDeportivos"
@*@rendermode InteractiveServer*@

@inject EventoDeportivoListadoUseCase EventoDeportivoListadoUseCase
@inject EventoDeportivoBajaUseCase  EventoDeportivoBajaUseCase
@inject ServicioAutorizacion ServicioAutorizacion
@inject NavigationManager Navegador
@inject UserState User

@*SI el usuario llego hasta aqui sin pasar por inicio_sesion/registro*@
@if (mostrarDialogo){
<Mensaje @ref=dialogo 
mensaje="Acceso no autorizado" 
soloMensaje=true
OnCerrado="VolverHome"/>
}
else{
<DialogoEx  @ref="dialogoex"/>
<DialogosDeConfirmacion @ref="dialogocon" OnConfirmado="Eliminar"/>
    <table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>NOMBRE</th>
        <th>DESCRIPCION</th>
        <th>INICIO</th>
        <th>DURACION </th>
        <th>CUPO MAXIMO</th>
        <th>RESPONSABLE ID</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var evento in _lista)
    {
    <tr>
        <td>@evento.ID</td>
        <td>@evento.Nombre</td>
        <td>@evento.Descripcion</td>
        <td>@evento.FechaHoraInicio</td>
        <td>@evento.DuracionHoras</td>
        <td>@evento.CupoMaximo</td>
         <td>@evento.ResponsableID</td> 
        <td>
            @if (Editar){
            <button class="btn btn-primary" @onclick="()=>Modificacion(evento)">
                Editar
            </button>}
        </td>
        <td>
            @if (Elimina){
            <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(evento)">
                Eliminar
            </button>}
        </td>
    </tr>
    }
        <button class="btn btn-danger" @onclick="()=>VolverInicio()">
            Volver al inicio
        </button>
    </tbody>
    </table>
}
@code {
List<EventoDeportivo> _lista = new List<EventoDeportivo>();
Usuario? user{get; set;}=null;
 DialogoEx? dialogoex;
 bool Editar;
bool Elimina;
Mensaje? dialogo=null;
bool mostrarDialogo=false;

protected override void OnInitialized()
{
    user=User.user;
  if (user ==null){
    mostrarDialogo=true;
  }
  else{
    _lista = EventoDeportivoListadoUseCase.Listado();
    Editar= ServicioAutorizacion.PoseeElPermiso(user.Permisos,Permiso.EventoModificacion);
   Elimina= ServicioAutorizacion.PoseeElPermiso(user.Permisos,Permiso.EventoBaja);
    }
}
DialogosDeConfirmacion? dialogocon;
EventoDeportivo? _evento =null;
private void VolverInicio(){
     Navegador.NavigateTo($"/inicio");
}
private void VolverHome(){
     Navegador.NavigateTo($"/");
}
private void ConfirmarEliminacion(EventoDeportivo evento)
{
 _evento = evento;
dialogocon?.Mostrar($"Â¿Desea eliminar al Evento {evento.ID} {evento.Nombre} {evento.Descripcion} {evento.FechaHoraInicio}?");
}
private void Modificacion(EventoDeportivo evento){
    Navegador.NavigateTo($"EventoDeportivo/{evento.ID}");
}
private void Eliminar()
{
if (_evento !=null)
{
    try{
        if(user!=null){
        EventoDeportivoBajaUseCase.Baja(_evento.ID, user);
        _lista = EventoDeportivoListadoUseCase.Listado(); }
}
catch(Exception e){
    dialogoex?.Mostrar(e.Message);
}
}
}
 protected override Task OnAfterRenderAsync(bool firstRender){
        if (mostrarDialogo && dialogo != null && firstRender){
            dialogo.Mostrar();
            StateHasChanged();
        }
        return Task.CompletedTask;
    } 
}
